const char* Blur_V_frag =
"#version 430 core\n"
"\n"
"out vec4 FragColor;\n"
"\n"
"uniform sampler2D inputTex;\n"
"uniform float blurRadius; // Multiplies the texel offset\n"
"uniform float sigma;      // Controls blur softness\n"
"\n"
"float gaussian(float x, float sigma) {\n"
"    return exp(-(x * x) / (2.0 * sigma * sigma)) / (sqrt(2.0 * 3.14159265) * sigma);\n"
"}\n"
"\n"
"void main()\n"
"{\n"
"    vec2 uv = gl_FragCoord.xy / vec2(textureSize(inputTex, 0));\n"
"    vec2 texelSize = vec2(0.0, 1.0 / textureSize(inputTex, 0).y);; // Vertical\n"
"    const int kernelSize = 5; // radius: will go from -5 to +5\n"
"    float weights[11];\n"
"    float sum = 0.0;\n"
"\n"
"    // Calculate weights\n"
"    for (int i = -kernelSize; i <= kernelSize; ++i) {\n"
"        float w = gaussian(float(i), sigma);\n"
"        weights[i + kernelSize] = w;\n"
"        sum += w;\n"
"    }\n"
"\n"
"    // Normalize weights\n"
"    for (int i = 0; i < 11; ++i) {\n"
"        weights[i] /= sum;\n"
"    }\n"
"\n"
"    // Apply blur\n"
"    vec3 result = vec3(0.0);\n"
"    for (int i = -kernelSize; i <= kernelSize; ++i) {\n"
"        vec2 offset = float(i) * texelSize * blurRadius;\n"
"        result += texture(inputTex, uv + offset).rgb * weights[i + kernelSize];\n"
"    }\n"
"\n"
"    FragColor = vec4(result, 1.0);\n"
"}\n"
;
