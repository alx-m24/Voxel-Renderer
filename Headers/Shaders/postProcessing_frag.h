const char* postProcessing_frag =
"#version 430 core\n"
"\n"
"out vec4 FragColor;\n"
"\n"
"uniform sampler2D screenTexture;\n"
"uniform sampler2D bloomTexture;\n"
"uniform sampler2D depthTexture;\n"
"\n"
"struct Fog {\n"
"    float Start;\n"
"    float End;\n"
"    float Density;\n"
"    vec3 Color;\n"
"};\n"
"\n"
"uniform vec2 uResolution;\n"
"uniform float near;\n"
"uniform float far;\n"
"uniform float editRadius;\n"
"uniform float radiusOpacity;\n"
"uniform Fog fog;\n"
"\n"
"uniform float exposure;\n"
"uniform float bloomIntensity;\n"
"\n"
"float computeFogFactor(float linearDepth) {\n"
"    float scaled = (linearDepth - fog.Start) / (fog.End - fog.Start);\n"
"    float fogFactor = 1.0 - exp(-scaled * fog.Density);\n"
"    fogFactor = clamp(fogFactor, 0.0, 1.0);\n"
"    return fogFactor;\n"
"}\n"
"\n"
"vec3 applyFog(vec3 sceneColor, float depth) {\n"
"    if (depth >= 1.0) return sceneColor;\n"
"    return mix(sceneColor, fog.Color, computeFogFactor(depth));\n"
"}\n"
"\n"
"vec3 saturate(vec3 color, float amount) {\n"
"    float grey = dot(color, vec3(0.2126, 0.7152, 0.0722)); // luminance\n"
"    return mix(vec3(grey), color, amount); // lerp towards color\n"
"}\n"
"\n"
"vec3 contrastBoost(vec3 color) {\n"
"    color = clamp(color, 0.0, 1.0);\n"
"    return (color - 0.5) * 1.15 + 0.5;  // steeper slope around midtones\n"
"}\n"
"\n"
"void main()\n"
"{\n"
"    vec2 TexCoords = gl_FragCoord.xy / uResolution;\n"
"\n"
"    float depth = texture(depthTexture, TexCoords).r;\n"
"\n"
"    vec3 scene = texture(screenTexture, TexCoords).rgb;\n"
"    vec3 bloom = texture(bloomTexture, TexCoords).rgb * bloomIntensity;\n"
"\n"
"    //vec3 finalColor = scene;\n"
"   // vec3 finalColor = bloom;\n"
"    vec3 finalColor = scene + bloom;\n"
"\n"
"    finalColor = applyFog(finalColor, depth);\n"
"\n"
"    // tone mapping\n"
"    finalColor = vec3(1.0) - exp(-finalColor * exposure);\n"
"    finalColor = saturate(finalColor, 1.2); // >1 increases vibrancy\n"
"    finalColor = contrastBoost(finalColor);\n"
"\n"
"    // ===== Crosshair Drawing =====\n"
"    ivec2 pixelCoord = ivec2(gl_FragCoord.xy);\n"
"    ivec2 center = ivec2(uResolution / 2);\n"
"\n"
"    // Size of crosshair lines in pixels\n"
"    int thickness = 1;\n"
"    int length = 7;\n"
"\n"
"    bool inVertical = abs(pixelCoord.x - center.x) <= thickness && abs(pixelCoord.y - center.y) <= length;\n"
"    bool inHorizontal = abs(pixelCoord.y - center.y) <= thickness && abs(pixelCoord.x - center.x) <= length;\n"
"\n"
"    if (inVertical || inHorizontal) {\n"
"        finalColor = mix(finalColor, vec3(1.0, 1.0, 1.0), 0.25); // white crosshair\n"
"    }\n"
"\n"
"    // ===== Circle Drawing =====\n"
"    float distToCenter = distance(pixelCoord, center);\n"
"\n"
"    float Circlethickness = 1.0; // Adjust this for line width\n"
"    if (abs(distToCenter - editRadius * 100) < Circlethickness) {\n"
"        finalColor = mix(finalColor, vec3(1.0, 1.0, 1.0), radiusOpacity); // white circle line\n"
"    }\n"
"\n"
"    FragColor = vec4(finalColor, 1.0);\n"
"}\n"
;
